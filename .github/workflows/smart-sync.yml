name: Smart Sync with Fallback Strategy

on:
  workflow_dispatch:
    inputs:
      sync_strategy:
        description: 'Sync strategy to use'
        required: true
        default: 'smart'
        type: choice
        options:
          - 'smart'
          - 'force_reset'
          - 'allow_unrelated'
          - 'manual_review'

jobs:
  smart-sync:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        repo:
          - name: "meme-generator"
            upstream: "https://github.com/MemeCrafters/meme-generator.git"
            local_path: "core"
          - name: "meme-generator-contrib"
            upstream: "https://github.com/MemeCrafters/meme-generator-contrib.git"
            local_path: "contrib"
          - name: "meme_emoji"
            upstream: "https://github.com/anyliew/meme_emoji.git"
            local_path: "emoji"
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          submodules: recursive

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global init.defaultBranch main

      - name: Analyze submodule state
        id: analyze
        run: |
          echo "=== Analyzing submodule: ${{ matrix.repo.local_path }} ==="
          
          # 首先检查.gitmodules文件
          if [ -f ".gitmodules" ]; then
            echo "Found .gitmodules file:"
            cat .gitmodules
          else
            echo "No .gitmodules file found"
          fi
          
          echo ""
          echo "Current directory contents:"
          ls -la
          
          echo ""
          echo "Git submodule status:"
          git submodule status || echo "No submodules or error occurred"
          
          # 检查子模块是否存在
          if [ ! -d "${{ matrix.repo.local_path }}" ]; then
            echo "status=missing" >> $GITHUB_OUTPUT
            echo "Submodule directory missing - will initialize"
            exit 0
          fi
          
          cd ${{ matrix.repo.local_path }}
          
          # 检查是否是Git仓库
          if [ ! -d ".git" ] && [ ! -f ".git" ]; then
            echo "status=not_git" >> $GITHUB_OUTPUT
            echo "Directory exists but not a Git repository"
            exit 0
          fi
          
          # 检查远程仓库
          if ! git remote | grep -q "origin"; then
            echo "status=no_origin" >> $GITHUB_OUTPUT
            echo "No origin remote found"
            exit 0
          fi
          
          # 获取当前状态
          current_branch=$(git branch --show-current)
          if [ -z "$current_branch" ]; then
            echo "status=detached" >> $GITHUB_OUTPUT
            echo "In detached HEAD state"
          else
            echo "status=normal" >> $GITHUB_OUTPUT
            echo "Normal state on branch: $current_branch"
          fi
          
          # 检查是否有未提交的更改
          if ! git diff --quiet || ! git diff --cached --quiet; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Has uncommitted changes"
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No uncommitted changes"
          fi

      - name: Initialize missing submodule
        if: steps.analyze.outputs.status == 'missing'
        run: |
          echo "Initializing missing submodule: ${{ matrix.repo.local_path }}"
          
          # 检查.gitmodules中是否定义了这个子模块
          if grep -q "path = ${{ matrix.repo.local_path }}" .gitmodules 2>/dev/null; then
            echo "Submodule defined in .gitmodules, initializing..."
            git submodule update --init --recursive ${{ matrix.repo.local_path }}
          else
            echo "Submodule not defined in .gitmodules, adding it..."
            git submodule add ${{ matrix.repo.upstream }} ${{ matrix.repo.local_path }}
            git submodule update --init --recursive ${{ matrix.repo.local_path }}
          fi
          
          echo "Submodule initialization completed"
          ls -la ${{ matrix.repo.local_path }}

      - name: Fix non-git directory
        if: steps.analyze.outputs.status == 'not_git'
        run: |
          echo "Fixing non-git directory: ${{ matrix.repo.local_path }}"
          rm -rf ${{ matrix.repo.local_path }}
          git submodule update --init --recursive ${{ matrix.repo.local_path }}

      - name: Setup upstream and sync
        if: steps.analyze.outputs.status != 'missing' && steps.analyze.outputs.status != 'not_git'
        run: |
          # 确保目录存在
          if [ ! -d "${{ matrix.repo.local_path }}" ]; then
            echo "Directory still missing after initialization, creating..."
            git submodule add ${{ matrix.repo.upstream }} ${{ matrix.repo.local_path }} || true
            git submodule update --init --recursive ${{ matrix.repo.local_path }}
          fi
          
          cd ${{ matrix.repo.local_path }}
          
          # 设置上游远程仓库
          if git remote | grep -q "^upstream$"; then
            git remote remove upstream
          fi
          git remote add upstream ${{ matrix.repo.upstream }}
          
          # 获取上游更新
          echo "Fetching from upstream..."
          git fetch upstream
          
          # 检测上游分支
          if git rev-parse upstream/main >/dev/null 2>&1; then
            upstream_branch="main"
          elif git rev-parse upstream/master >/dev/null 2>&1; then
            upstream_branch="master"
          else
            echo "Error: Could not find upstream main or master branch"
            exit 1
          fi
          
          echo "Upstream branch: $upstream_branch"
          
          # 根据策略执行同步
          case "${{ github.event.inputs.sync_strategy }}" in
            "smart")
              echo "Using smart sync strategy..."
              ${{ github.workspace }}/.github/scripts/smart-sync.sh $upstream_branch
              ;;
            "force_reset")
              echo "Using force reset strategy..."
              git reset --hard upstream/$upstream_branch
              echo "Force reset completed"
              ;;
            "allow_unrelated")
              echo "Using allow unrelated histories strategy..."
              git merge upstream/$upstream_branch --allow-unrelated-histories --no-edit || {
                echo "Merge failed even with --allow-unrelated-histories"
                exit 1
              }
              ;;
            "manual_review")
              echo "Manual review requested - creating PR..."
              # 这个策略会在后续步骤中创建PR
              ;;
          esac

      - name: Create smart sync script
        run: |
          mkdir -p .github/scripts
          cat > .github/scripts/smart-sync.sh << 'EOF'
          #!/bin/bash
          set -e
          
          upstream_branch=$1
          
          echo "Starting smart sync with upstream/$upstream_branch"
          
          # 尝试正常合并
          if git merge upstream/$upstream_branch --no-edit; then
            echo "✅ Normal merge successful"
            exit 0
          fi
          
          # 检查错误类型
          merge_output=$(git merge upstream/$upstream_branch --no-edit 2>&1 || true)
          
          if echo "$merge_output" | grep -q "refusing to merge unrelated histories"; then
            echo "🔄 Detected unrelated histories, trying with --allow-unrelated-histories"
            git reset --hard HEAD  # 重置到合并前状态
            
            if git merge upstream/$upstream_branch --allow-unrelated-histories --no-edit; then
              echo "✅ Merge with --allow-unrelated-histories successful"
              exit 0
            else
              echo "❌ Merge with --allow-unrelated-histories failed"
              git merge --abort 2>/dev/null || true
              exit 1
            fi
          else
            echo "❌ Merge failed with other conflicts"
            git merge --abort 2>/dev/null || true
            exit 1
          fi
          EOF
          
          chmod +x .github/scripts/smart-sync.sh

      - name: Push changes
        if: github.event.inputs.sync_strategy != 'manual_review'
        run: |
          cd ${{ matrix.repo.local_path }}
          
          # 检查是否有更改需要推送
          if git diff --quiet HEAD~1 HEAD 2>/dev/null; then
            echo "No changes to push"
            exit 0
          fi
          
          # 推送更改
          current_branch=$(git branch --show-current)
          if [ -z "$current_branch" ]; then
            git checkout -b main
            current_branch="main"
          fi
          
          echo "Pushing changes to $current_branch"
          git push origin $current_branch

      - name: Create manual review PR
        if: github.event.inputs.sync_strategy == 'manual_review'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "sync: Manual review for ${{ matrix.repo.name }}"
          title: "🔍 Manual Review: Sync ${{ matrix.repo.name }}"
          body: |
            ## 🔍 Manual Review Required for ${{ matrix.repo.name }}
            
            This PR was created for manual review of upstream changes.
            
            **Repository:** ${{ matrix.repo.upstream }}
            **Local Path:** ${{ matrix.repo.local_path }}
            **Strategy:** Manual Review
            
            ### 📋 Review Checklist:
            - [ ] Check for breaking changes
            - [ ] Verify configuration compatibility
            - [ ] Test new features
            - [ ] Review dependency updates
            
            ### 🔧 Next Steps:
            1. Review all changes carefully
            2. Test locally if needed
            3. Merge when ready
          branch: manual-review/${{ matrix.repo.name }}-${{ github.run_number }}
          delete-branch: true

      - name: Report results
        if: always()
        run: |
          echo "=== Sync Results for ${{ matrix.repo.name }} ==="
          echo "Strategy: ${{ github.event.inputs.sync_strategy }}"
          echo "Status: ${{ steps.analyze.outputs.status }}"
          echo "Repository: ${{ matrix.repo.upstream }}"
          echo "Local path: ${{ matrix.repo.local_path }}"