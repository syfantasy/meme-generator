name: Sync Upstream Repositories

on:
  schedule:
    # 每天UTC 02:00 (北京时间10:00) 运行
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      force_sync:
        description: 'Force sync all repositories'
        required: false
        default: 'false'
        type: boolean
      target_repo:
        description: 'Specific repository to sync (leave empty for all)'
        required: false
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'meme-generator'
          - 'meme-generator-contrib'
          - 'meme_emoji'

jobs:
  sync-repositories:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false  # 允许其他任务继续执行，即使某个任务失败
      matrix:
        repo:
          - name: "meme-generator"
            upstream: "https://github.com/MemeCrafters/meme-generator.git"
            local_path: "core"
            branch: "main"
          - name: "meme-generator-contrib"
            upstream: "https://github.com/MemeCrafters/meme-generator-contrib.git"
            local_path: "contrib"
            branch: "main"
          - name: "meme_emoji"
            upstream: "https://github.com/anyliew/meme_emoji.git"
            local_path: "emoji"
            branch: "main"
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          submodules: recursive

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global init.defaultBranch main

      - name: Debug environment and permissions
        run: |
          echo "=== Environment Debug Info ==="
          echo "Current directory: $(pwd)"
          echo "Git version: $(git --version)"
          echo "Repository status:"
          git status
          echo ""
          echo "Submodules status:"
          git submodule status || echo "No submodules found or error occurred"
          echo ""
          echo "Available directories:"
          ls -la
          echo ""
          echo "Checking target submodule directory: ${{ matrix.repo.local_path }}"
          if [ -d "${{ matrix.repo.local_path }}" ]; then
            echo "Directory exists, contents:"
            ls -la ${{ matrix.repo.local_path }}
          else
            echo "Directory does not exist"
          fi

      - name: Initialize and setup submodule for ${{ matrix.repo.name }}
        run: |
          echo "Checking submodule ${{ matrix.repo.local_path }}..."
          
          # 确保子模块已初始化
          if [ ! -d "${{ matrix.repo.local_path }}" ]; then
            echo "Submodule directory ${{ matrix.repo.local_path }} does not exist, initializing..."
            git submodule update --init --recursive ${{ matrix.repo.local_path }}
          fi
          
          # 检查子模块是否为空目录
          if [ ! -d "${{ matrix.repo.local_path }}/.git" ] && [ ! -f "${{ matrix.repo.local_path }}/.git" ]; then
            echo "Submodule ${{ matrix.repo.local_path }} not properly initialized, forcing update..."
            git submodule update --init --recursive --force ${{ matrix.repo.local_path }}
          fi
          
          # 进入子模块目录
          cd ${{ matrix.repo.local_path }}
          
          # 检查是否在detached HEAD状态
          current_branch=$(git branch --show-current)
          if [ -z "$current_branch" ]; then
            echo "In detached HEAD state, checking out main branch..."
            git checkout -b main 2>/dev/null || git checkout main 2>/dev/null || git checkout master 2>/dev/null
          fi
          
          # 设置上游远程仓库
          if git remote | grep -q "^upstream$"; then
            git remote remove upstream
          fi
          git remote add upstream ${{ matrix.repo.upstream }}
          
          # 添加错误处理和重试机制
          for i in {1..3}; do
            if git fetch upstream; then
              echo "Successfully fetched from upstream"
              break
            else
              echo "Attempt $i failed, retrying in 10 seconds..."
              sleep 10
              if [ $i -eq 3 ]; then
                echo "Failed to fetch from upstream after 3 attempts"
                exit 1
              fi
            fi
          done

      - name: Check for updates
        id: check_updates
        run: |
          cd ${{ matrix.repo.local_path }}
          
          # 获取本地提交
          LOCAL_COMMIT=$(git rev-parse HEAD)
          echo "Local commit: $LOCAL_COMMIT"
          
          # 尝试获取上游提交，支持main和master分支
          UPSTREAM_COMMIT=""
          if git rev-parse upstream/main >/dev/null 2>&1; then
            UPSTREAM_COMMIT=$(git rev-parse upstream/main)
            UPSTREAM_BRANCH="main"
          elif git rev-parse upstream/master >/dev/null 2>&1; then
            UPSTREAM_COMMIT=$(git rev-parse upstream/master)
            UPSTREAM_BRANCH="master"
          else
            echo "Error: Could not find upstream/main or upstream/master branch"
            exit 1
          fi
          
          echo "Upstream commit: $UPSTREAM_COMMIT (branch: $UPSTREAM_BRANCH)"
          
          echo "local_commit=$LOCAL_COMMIT" >> $GITHUB_OUTPUT
          echo "upstream_commit=$UPSTREAM_COMMIT" >> $GITHUB_OUTPUT
          echo "upstream_branch=$UPSTREAM_BRANCH" >> $GITHUB_OUTPUT
          
          if [ "$LOCAL_COMMIT" != "$UPSTREAM_COMMIT" ] || [ "${{ github.event.inputs.force_sync }}" = "true" ]; then
            echo "has_updates=true" >> $GITHUB_OUTPUT
            echo "Updates found for ${{ matrix.repo.name }}"
          else
            echo "has_updates=false" >> $GITHUB_OUTPUT
            echo "No updates for ${{ matrix.repo.name }}"
          fi

      - name: Attempt automatic merge
        if: steps.check_updates.outputs.has_updates == 'true'
        id: auto_merge
        run: |
          cd ${{ matrix.repo.local_path }}
          
          # 使用检测到的上游分支进行合并
          upstream_branch="${{ steps.check_updates.outputs.upstream_branch }}"
          echo "Attempting to merge upstream/$upstream_branch"
          
          # 尝试自动合并
          if git merge upstream/$upstream_branch --no-edit; then
            echo "merge_success=true" >> $GITHUB_OUTPUT
            echo "Auto merge successful for ${{ matrix.repo.name }}"
          else
            echo "merge_success=false" >> $GITHUB_OUTPUT
            echo "Auto merge failed for ${{ matrix.repo.name }}, conflicts detected"
            git merge --abort
          fi

      - name: Commit and push successful merge
        if: steps.check_updates.outputs.has_updates == 'true' && steps.auto_merge.outputs.merge_success == 'true'
        run: |
          cd ${{ matrix.repo.local_path }}
          # 检查当前分支并推送到正确的分支
          current_branch=$(git branch --show-current)
          if [ -z "$current_branch" ]; then
            # 如果在detached HEAD状态，切换到主分支
            git checkout -b main || git checkout main
            current_branch="main"
          fi
          git push origin $current_branch
          echo "Successfully synced ${{ matrix.repo.name }} to branch $current_branch"

      - name: Create PR for conflicted merge
        if: steps.check_updates.outputs.has_updates == 'true' && steps.auto_merge.outputs.merge_success == 'false'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "sync: Update ${{ matrix.repo.name }} from upstream"
          title: "🔄 Sync ${{ matrix.repo.name }} - Manual Review Required"
          body: |
            ## 🔄 Upstream Sync for ${{ matrix.repo.name }}
            
            This PR contains updates from the upstream repository that require manual review due to conflicts.
            
            **Upstream Repository:** ${{ matrix.repo.upstream }}
            **Local Commit:** `${{ steps.check_updates.outputs.local_commit }}`
            **Upstream Commit:** `${{ steps.check_updates.outputs.upstream_commit }}`
            
            ### 📋 Manual Steps Required:
            1. Review the conflicts in the changed files
            2. Resolve conflicts manually
            3. Test the integration
            4. Merge this PR
            
            ### 🔍 Files to Review:
            Please check the following areas for potential issues:
            - Configuration files
            - Dependencies in requirements.txt/pyproject.toml
            - API compatibility
            - New meme implementations
            
            ---
            *This PR was automatically created by the sync workflow.*
          branch: sync/${{ matrix.repo.name }}-${{ github.run_number }}
          delete-branch: true

  build-and-test:
    needs: sync-repositories
    runs-on: ubuntu-latest
    if: always() && !cancelled()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

      - name: Test meme generator import
        run: |
          cd core
          python -c "
          import sys
          sys.path.insert(0, '.')
          try:
              import meme_generator
              print('✅ Core meme_generator imported successfully')
          except Exception as e:
              print(f'❌ Failed to import meme_generator: {e}')
              sys.exit(1)
          "

      - name: Build Docker image
        run: |
          docker build -t meme-generator-unified:test -f docker/Dockerfile .

      - name: Test Docker container
        run: |
          docker run --rm -d --name test-container -p 2233:2233 meme-generator-unified:test
          sleep 30
          
          # 测试健康检查
          if curl -f http://localhost:2233/docs; then
            echo "✅ Docker container is healthy"
          else
            echo "❌ Docker container health check failed"
            docker logs test-container
            exit 1
          fi
          
          docker stop test-container

  notify:
    needs: [sync-repositories, build-and-test]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify completion
        run: |
          echo "🎉 Sync workflow completed"
          echo "Sync status: ${{ needs.sync-repositories.result }}"
          echo "Build status: ${{ needs.build-and-test.result }}"