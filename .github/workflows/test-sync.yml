name: Test Sync Fix

on:
  workflow_dispatch:
    inputs:
      test_repo:
        description: 'Repository to test'
        required: true
        default: 'meme-generator'
        type: choice
        options:
          - 'meme-generator'
          - 'meme-generator-contrib'
          - 'meme_emoji'

jobs:
  test-single-repo:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          submodules: recursive

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global init.defaultBranch main

      - name: Set repository variables
        id: set_vars
        run: |
          case "${{ github.event.inputs.test_repo }}" in
            "meme-generator")
              echo "upstream=https://github.com/MemeCrafters/meme-generator.git" >> $GITHUB_OUTPUT
              echo "local_path=core" >> $GITHUB_OUTPUT
              ;;
            "meme-generator-contrib")
              echo "upstream=https://github.com/MemeCrafters/meme-generator-contrib.git" >> $GITHUB_OUTPUT
              echo "local_path=contrib" >> $GITHUB_OUTPUT
              ;;
            "meme_emoji")
              echo "upstream=https://github.com/anyliew/meme_emoji.git" >> $GITHUB_OUTPUT
              echo "local_path=emoji" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Debug environment
        run: |
          echo "=== Environment Debug Info ==="
          echo "Current directory: $(pwd)"
          echo "Git version: $(git --version)"
          echo "Repository status:"
          git status
          echo ""
          echo "Submodules status:"
          git submodule status || echo "No submodules found or error occurred"
          echo ""
          echo "Available directories:"
          ls -la
          echo ""
          echo "Checking target submodule directory: ${{ steps.set_vars.outputs.local_path }}"
          if [ -d "${{ steps.set_vars.outputs.local_path }}" ]; then
            echo "Directory exists, contents:"
            ls -la ${{ steps.set_vars.outputs.local_path }}
            if [ -d "${{ steps.set_vars.outputs.local_path }}/.git" ] || [ -f "${{ steps.set_vars.outputs.local_path }}/.git" ]; then
              echo "Git repository detected in submodule"
            else
              echo "No Git repository in submodule directory"
            fi
          else
            echo "Directory does not exist"
          fi

      - name: Test upstream repository access
        run: |
          echo "Testing access to upstream repository: ${{ steps.set_vars.outputs.upstream }}"
          if git ls-remote ${{ steps.set_vars.outputs.upstream }} HEAD; then
            echo "✅ Successfully accessed upstream repository"
          else
            echo "❌ Failed to access upstream repository"
            exit 1
          fi

      - name: Initialize submodule if needed
        run: |
          local_path="${{ steps.set_vars.outputs.local_path }}"
          
          echo "Checking submodule $local_path..."
          
          # 确保子模块已初始化
          if [ ! -d "$local_path" ]; then
            echo "Submodule directory $local_path does not exist, initializing..."
            git submodule update --init --recursive $local_path
          fi
          
          # 检查子模块是否为空目录
          if [ ! -d "$local_path/.git" ] && [ ! -f "$local_path/.git" ]; then
            echo "Submodule $local_path not properly initialized, forcing update..."
            git submodule update --init --recursive --force $local_path
          fi
          
          echo "Submodule initialization completed"

      - name: Test submodule operations
        run: |
          local_path="${{ steps.set_vars.outputs.local_path }}"
          upstream="${{ steps.set_vars.outputs.upstream }}"
          
          echo "Testing operations in submodule: $local_path"
          
          # 进入子模块目录
          cd $local_path
          
          echo "Current directory: $(pwd)"
          echo "Git status in submodule:"
          git status
          
          # 检查是否在detached HEAD状态
          current_branch=$(git branch --show-current)
          if [ -z "$current_branch" ]; then
            echo "In detached HEAD state, checking out main branch..."
            git checkout -b main 2>/dev/null || git checkout main 2>/dev/null || git checkout master 2>/dev/null
            current_branch=$(git branch --show-current)
          fi
          echo "Current branch: $current_branch"
          
          # 设置上游远程仓库
          if git remote | grep -q "^upstream$"; then
            git remote remove upstream
          fi
          git remote add upstream $upstream
          
          echo "Remote repositories:"
          git remote -v
          
          # 测试fetch操作
          echo "Testing fetch from upstream..."
          if git fetch upstream; then
            echo "✅ Successfully fetched from upstream"
          else
            echo "❌ Failed to fetch from upstream"
            exit 1
          fi
          
          echo "✅ All submodule operations completed successfully"

      - name: Report results
        if: always()
        run: |
          echo "=== Test Results Summary ==="
          echo "Repository: ${{ github.event.inputs.test_repo }}"
          echo "Upstream: ${{ steps.set_vars.outputs.upstream }}"
          echo "Local path: ${{ steps.set_vars.outputs.local_path }}"
          echo "Status: Test completed"